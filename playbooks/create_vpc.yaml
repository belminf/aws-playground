---
- name: create VPC with bastion host
  hosts: localhost
  connection: local
  gather_facts: no
  vars:

    # Required (have no defaults):
    # * project - name for this project
    # * dns_zone - for bastion DNS hostname
    # * instance_type - for bastion
    # * admin_user - user for bastion
    # * github_user - where to get public keys from

    # Networking
    vpc_name: vpc_{{ project }}
    vpc_cidr_block: "172.16.0.0/16"
    subnet_prefix: "172.16"
    subnet_private_inc: 10
    subnet_cidr: 24
    my_ip_cidr: 24
    
    # Region and AZ
    region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
    zone_prefixes: "{{ lookup('env', 'AWS_DEFAULT_ZONES').split(',') }}"

    # Bastion instance
    ami: ami-fd6e3bea # Ubuntu 16.04 LTS
    keypair: "{{ lookup('env','AWS_DEFAULT_KEYPAIR') }}"
    sg_bastion: sg_{{ project }}_bastion
    iam_bastion: "{{ project }}_bastion"
    dns_bastion: "{{ project }}-bastion.{{ dns_zone }}"

  tags: aws
  tasks:

    - name: VPC configuration
      ec2_vpc:
        state: present
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ region }}"
        resource_tags:
          Name: "{{ vpc_name }}"
          Project: "{{ project }}"
        internet_gateway: yes
        wait: yes
      register: vpc
    
    - name: create public subnets
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc_id }}"
        cidr: "{{ '%s.%s/%s' | format(subnet_prefix, item[0] + 1, subnet_cidr) | ipaddr(0)}}"
        region: "{{ region }}"
        az: "{{ region }}{{ item[1] }}"
        resource_tags:
          Name: "sn_{{ project }}_{{ region }}{{ item[1] }}_public"
          Project: "{{ project }}"
      with_indexed_items: "{{ zone_prefixes }}"
      register: public_subnets

    - name: gather public subnets
      set_fact:
        public_subnet_ids: "{{ public_subnets.results | map(attribute='subnet.id') | list }}"

    - name: create private subnets
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc_id }}"
        cidr: "{{ '%s.%s/%s' | format(subnet_prefix, item[0] + 1 + subnet_private_inc, subnet_cidr) | ipaddr(0)}}"
        region: "{{ region }}"
        az: "{{ region }}{{ item[1] }}"
        resource_tags:
          Name: "sn_{{ project }}_{{ region }}{{ item[1] }}_private"
          Project: "{{ project }}"
      with_indexed_items: "{{ zone_prefixes }}"
      register: private_subnets

    - name: gather private subnets
      set_fact:
        private_subnet_ids: "{{ private_subnets.results | map(attribute='subnet.id') | list }}"

    - name: routing table for public subnets
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ region }}"
        subnets: "{{ public_subnet_ids }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: igw
        resource_tags:
          Name: "rt_{{ project }}_public"
          Project: "{{ project }}"

    - name: NAT gateways
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{ item }}"
        wait: yes
        region: "{{ region }}"
        if_exist_do_not_create: true
      with_items: "{{ public_subnet_ids }}"
      register: nat_gateways

    - name: gather NAT gateways
      set_fact:
        nat_gateway_ids: "{{ nat_gateways.results | map(attribute='nat_gateway_id') | list }}"

    - name: routing table for private subnets
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ region }}"
        subnets:
          - "{{ item[0] }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ item[1] }}"
        resource_tags:
          Name: "rt_{{ project }}_private_{{ region }}{{ item[2] }}"
          Project: "{{ project }}"
      with_together:
        - "{{ private_subnet_ids }}"
        - "{{ nat_gateway_ids }}"
        - "{{ zone_prefixes }}"
    
    - name: get external IP
      uri: url=http://checkip.amazonaws.com/ return_content=yes
      register: external_ip

    - name: SG for bastion
      ec2_group:
        name: "{{ sg_bastion }}"
        description: "{{ project }} SG for bastion"
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: "{{ [external_ip.content | replace('\n', ''), my_ip_cidr] | join('/') | ipaddr(0) }}"
      register: security_group

    - name: tag SG
      ec2_tag:
        resource: "{{ security_group.group_id }}"
        tags:
          Name: "{{ sg_bastion }}"
          Project: "{{ project }}"
    
    - name: IAM role for bastion
      iam:
        iam_type: role
        name: "{{ iam_bastion }}"
        state: present
 
    - name: EC2 bastion instance
      ec2:
        key_name: "{{ keypair }}"
        group: "{{ sg_bastion }}"
        instance_type: "{{ instance_type }}"
        instance_profile_name: "{{ iam_bastion }}"
        image: "{{ ami }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ public_subnet_ids | random }}"
        assign_public_ip: yes
        wait: true
        instance_tags:
          Name: "{{ project }}_bastion"
          Project: "{{ project }}"
        exact_count: 1
        count_tag:
          Name: "{{ project }}_bastion"
      retries: 5
      delay: 5
      register: bastion_instance

    - name: Route53 DNS record
      route53:
        command: create
        zone: "{{ dns_zone }}"
        record: "{{ dns_bastion }}"
        type: A
        value: "{{ bastion_instance.tagged_instances[0].public_ip }}"
        overwrite: yes
        wait: yes
    
    - name: gather instance
      add_host: hostname={{ item.public_ip }} groups={{ item.tags.Name }},new_ec2_instances
      with_items:
        - "{{ bastion_instance.tagged_instances }}"
      changed_when: no

    - name: wait for SSH
      wait_for: host={{ item.public_dns_name }} port=22 timeout=320 state=started
      with_items: 
        - "{{ bastion_instance.tagged_instances }}"

- include: tasks/ubuntu_bootstrap.yml hosts=new_ec2_instances

- hosts: new_ec2_instances
  user: ubuntu
  become: yes
  roles:
    - secure_ubuntu
